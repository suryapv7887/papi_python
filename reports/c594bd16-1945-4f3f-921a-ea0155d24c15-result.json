{"name": "test_fill_basic_details", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=136.0.7103.114)\nStacktrace:\n\tGetHandleVerifier [0x00F6FC83+61635]\n\tGetHandleVerifier [0x00F6FCC4+61700]\n\t(No symbol) [0x00D9044E]\n\t(No symbol) [0x00DD33B9]\n\t(No symbol) [0x00DD1A7A]\n\t(No symbol) [0x00DFD29C]\n\t(No symbol) [0x00DCE034]\n\t(No symbol) [0x00DFD514]\n\t(No symbol) [0x00E1E61B]\n\t(No symbol) [0x00DFD096]\n\t(No symbol) [0x00DCC840]\n\t(No symbol) [0x00DCD6A4]\n\tGetHandleVerifier [0x011F45A3+2701795]\n\tGetHandleVerifier [0x011EFD26+2683238]\n\tGetHandleVerifier [0x0120AA6E+2793134]\n\tGetHandleVerifier [0x00F86945+155013]\n\tGetHandleVerifier [0x00F8D02D+181357]\n\tGetHandleVerifier [0x00F774D8+92440]\n\tGetHandleVerifier [0x00F77680+92864]\n\tGetHandleVerifier [0x00F62070+5296]\n\tBaseThreadInitThunk [0x76325D49+25]\n\tRtlInitializeExceptionChain [0x77C3D03B+107]\n\tRtlGetAppContainerNamedObjectPath [0x77C3CFC1+561]", "trace": "self = <test_new_regular_employee.TestAddNewRegularEmployee object at 0x000001CC76AC8EF0>\n\n    def test_fill_basic_details(self):\n    \n        self.employee_form_page.fill_basic_details(\n            self.employee_data[\"first_name\"],\n            self.employee_data[\"last_name\"],\n            self.employee_data[\"email\"],\n            self.employee_data[\"mobile\"],\n            self.employee_data[\"linkedin\"]\n        )\n    \n    #def test_fill_personal_details(self):\n        self.employee_form_page.fill_personal_details(\n            self.employee_data[\"dob\"],\n            self.employee_data[\"age\"],\n            self.employee_data[\"blood_group\"],\n            self.employee_data[\"gender\"],\n            self.employee_data[\"marital_status\"]\n        )\n    \n    #def test_fill_address_details(self):\n        self.employee_form_page.fill_address_details(\n            present_address=self.employee_data[\"present_address\"],\n            permanent_address=self.employee_data.get(\"permanent_address\"),\n            same_as_present=self.employee_data.get(\"same_as_present\", False)\n        )\n    \n    #def test_fill_bank_details(self):\n        self.employee_form_page.fill_bank_details(\n            self.employee_data[\"aadhar\"],\n            self.employee_data[\"aadhar_file\"],\n            self.employee_data[\"pan\"],\n            self.employee_data[\"pan_file\"],\n            self.employee_data[\"bank\"],\n            self.employee_data[\"account_number\"],\n            self.employee_data[\"ifsc\"],\n            self.employee_data[\"passport_file\"]\n        )\n    \n    #def test_fill_emergency_details(self):\n        self.employee_form_page.fill_emergency_details(\n            self.employee_data[\"emergency_name\"],\n            self.employee_data[\"emergency_contact\"]\n        )\n    \n    #def test_upload_employment_documents(self):\n        self.employee_form_page.upload_employment_documents(\n            self.employee_data[\"releiving_letter_file\"],\n            self.employee_data[\"payslips_file\"],\n            self.employee_data[\"experience_certificate_file\"],\n            self.employee_data[\"educational_certificate_file\"]\n        )\n    \n    #def test_update_insurance_details(self):\n        self.employee_form_page.update_insurance_details(\n            dependent_data=self.employee_data.get(\"dependent_data\"),\n            Insurance_required=self.employee_data.get(\"insurance_required\")\n        )\n    \n    #def test_update_pf_gratuity_details(self):\n        self.employee_form_page.update_PF_and_Gratuity_details(\n            PF_data=self.employee_data.get(\"PF_data\"),\n            PF_required=self.employee_data.get(\"PF_required\"),\n            Gratuity_data=self.employee_data.get(\"Gratuity_data\")\n        )\n    \n    #def test_update_skill_details(self):\n>       self.employee_form_page.update_skill_details(\n            category=self.employee_data[\"skill_category\"],\n            skill=self.employee_data[\"skill\"],\n            experience_years=self.employee_data[\"experience_years\"],\n            experience_months=self.employee_data[\"experience_months\"],\n            #proficiency=self.employee_data[\"proficiency\"]\n        )\n\ntestcases\\test_new_regular_employee.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\new_regular_employee_page.py:107: in update_skill_details\n    self.helpers.send_keys(LOC.EXPERIENCE_YEARS,experience_years)\nutils\\helpers.py:29: in send_keys\n    element.send_keys(text)\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001CC768CB0B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77C3D03B+107]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C3CFC1+561]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=136.0.7103.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00F6FC83+61635]\nE       \tGetHandleVerifier [0x00F6FCC4+61700]\nE       \t(No symbol) [0x00D9044E]\nE       \t(No symbol) [0x00DD33B9]\nE       \t(No symbol) [0x00DD1A7A]\nE       \t(No symbol) [0x00DFD29C]\nE       \t(No symbol) [0x00DCE034]\nE       \t(No symbol) [0x00DFD514]\nE       \t(No symbol) [0x00E1E61B]\nE       \t(No symbol) [0x00DFD096]\nE       \t(No symbol) [0x00DCC840]\nE       \t(No symbol) [0x00DCD6A4]\nE       \tGetHandleVerifier [0x011F45A3+2701795]\nE       \tGetHandleVerifier [0x011EFD26+2683238]\nE       \tGetHandleVerifier [0x0120AA6E+2793134]\nE       \tGetHandleVerifier [0x00F86945+155013]\nE       \tGetHandleVerifier [0x00F8D02D+181357]\nE       \tGetHandleVerifier [0x00F774D8+92440]\nE       \tGetHandleVerifier [0x00F77680+92864]\nE       \tGetHandleVerifier [0x00F62070+5296]\nE       \tBaseThreadInitThunk [0x76325D49+25]\nE       \tRtlInitializeExceptionChain [0x77C3D03B+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C3CFC1+561]\n\nC:\\Users\\Sinergia\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "attachments": [{"name": "Failure_Screenshot_test_fill_basic_details", "source": "47acd754-47c0-495f-adbe-306339f1e50b-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "3872d6fc-284c-46cc-afb5-b26ecb160983-attachment.txt", "type": "text/plain"}], "start": 1747740725540, "stop": 1747740739831, "uuid": "5e1e1fd4-6502-4352-a88a-75b7480add25", "historyId": "3ba98db5fec22ed4f6a10914693a94ba", "testCaseId": "3ba98db5fec22ed4f6a10914693a94ba", "fullName": "testcases.test_new_regular_employee.TestAddNewRegularEmployee#test_fill_basic_details", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('login_user')"}, {"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_new_regular_employee"}, {"name": "subSuite", "value": "TestAddNewRegularEmployee"}, {"name": "host", "value": "DESKTOP-LIFTNJ8"}, {"name": "thread", "value": "20776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_new_regular_employee"}]}